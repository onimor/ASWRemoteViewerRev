@inherits UiComponentBase 
@inject IDialogService Dialog
@inject RemoteCounterpartyClient RemoteCounterpartyClient
@inject RemoteGoodClient RemoteGoodClient

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Дополнительные фильтры
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (_dataIsReedy)
        {
            <MudStack>
                <MudAutocomplete T="RemoteGoodDto" Clearable Label="Груз" ToStringFunc="@((x) => x.Name)" @bind-Value="_selectedRemoteGood" SearchFunc="@SearchRemoteGood"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="true" CoerceValue="true" IconSize="Size.Small" />
                <MudAutocomplete T="RemoteCounterpartyDto" Clearable Label="Отправитель" ToStringFunc="@((x) => x.Name)" @bind-Value="_selectedSender" SearchFunc="@SearchRemoteCounterparty"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="true" CoerceValue="true" IconSize="Size.Small" />
                <MudAutocomplete T="RemoteCounterpartyDto" Clearable Label="Получатель" ToStringFunc="@((x) => x.Name)" @bind-Value="_selectedRecipient" SearchFunc="@SearchRemoteCounterparty"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="true" CoerceValue="true" IconSize="Size.Small" />
                <MudAutocomplete T="RemoteCounterpartyDto" Clearable Label="Плательщик" ToStringFunc="@((x) => x.Name)" @bind-Value="_selectedPayer" SearchFunc="@SearchRemoteCounterparty"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="true" CoerceValue="true" IconSize="Size.Small" />
                <MudAutocomplete T="RemoteCounterpartyDto" Clearable Label="Перевозчик" ToStringFunc="@((x) => x.Name)" @bind-Value="_selectedCarrier" SearchFunc="@SearchRemoteCounterparty"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="true" CoerceValue="true" IconSize="Size.Small" />
                <MudButton Color="Color.Success" OnClick="Confirm">
                    Экспорт
                </MudButton>
            </MudStack>
        }
        else
        {
            <MudStack Style="height:300px" Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudProgressCircular Size="Size.Medium" Color="Color.Info" Indeterminate />
            </MudStack>
        }
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; }  
    private RemoteGoodDto? _selectedRemoteGood { get; set; }
    private RemoteCounterpartyDto? _selectedSender { get; set; }
    private RemoteCounterpartyDto? _selectedRecipient { get; set; }
    private RemoteCounterpartyDto? _selectedCarrier { get; set; }
    private RemoteCounterpartyDto? _selectedPayer { get; set; }
    private List<RemoteGoodDto>? _goods { get; set; } = new();
    private List<RemoteCounterpartyDto>? _counterparties { get; set; } = new(); 
    private bool _dataIsReedy { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender) => await RunSafe(async () =>
    {
        if (firstRender)
        {
            _goods = await RemoteGoodClient.GetAllAsync();
            _counterparties = await RemoteCounterpartyClient.GetAllAsync();
            _dataIsReedy = true;
            StateHasChanged();
        }
    });

    private Task<IEnumerable<RemoteGoodDto>?> SearchRemoteGood(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(value))
            return Task.FromResult<IEnumerable<RemoteGoodDto>?>(_goods);

        return Task.FromResult(_goods?.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    private Task<IEnumerable<RemoteCounterpartyDto>?> SearchRemoteCounterparty(string value, CancellationToken cancellationToken)
    { 
        if (string.IsNullOrEmpty(value)) 
            return Task.FromResult<IEnumerable<RemoteCounterpartyDto>?>(_counterparties);

        return Task.FromResult(_counterparties?.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    private void Confirm()
    {
        MudDialog?.Close(new ExportToExcelFiltersDto
        {
            GoodId = _selectedRemoteGood is null ? Guid.Empty : _selectedRemoteGood.Id,
            SenderId = _selectedSender is null ? Guid.Empty : _selectedSender.Id,
            PayerId = _selectedPayer is null ? Guid.Empty : _selectedPayer.Id,
            CarrierId = _selectedCarrier is null ? Guid.Empty : _selectedCarrier.Id,
            RecipientId = _selectedRecipient is null ? Guid.Empty : _selectedRecipient.Id,
        });
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }
}